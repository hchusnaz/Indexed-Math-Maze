<!-- START OF CODE -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Indexed Math Maze</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body {
      font-family: 'Comic Sans MS', cursive, sans-serif;
      background: linear-gradient(135deg, #222, #111);
      color: white;
      overflow: hidden;
    }
    canvas {
      display: block;
      margin: 20px auto;
      background: #111;
      border: 3px dashed #0ff;
      box-shadow: 0 0 15px cyan;
    }
    #questionBox, #gameOverBox {
      position: absolute;
      top: 20%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: #333;
      padding: 20px;
      border: 2px solid #0ff;
      box-shadow: 0 0 10px #0ff;
      text-align: center;
    }
    #questionBox button, #gameOverBox button {
      margin: 5px;
      padding: 10px 15px;
      background: #0ff;
      border: none;
      border-radius: 10px;
      font-weight: bold;
      color: #000;
      cursor: pointer;
    }
    #certificate {
      display: none;
      text-align: center;
      padding: 40px;
      color: white;
    }
    #gameOverBox {
      display: none;
    }
    #healthBar {
      position: absolute;
      top: 10px;
      left: 10px;
      background: #222;
      border: 2px solid #fff;
      width: 120px;
      height: 20px;
    }
    #healthFill {
      background: red;
      height: 100%;
      width: 100%;
    }
  </style>
</head>
<body>
  <canvas id="gameCanvas" width="600" height="400"></canvas>
  <div id="healthBar"><div id="healthFill"></div></div>
  <div id="questionBox">
    <div id="questionText">Question appears here</div>
    <div id="answers"></div>
  </div>
  <div id="certificate">
    <h1>Congratulations!</h1>
    <p>You scored 10/10 ðŸŽ‰</p>
    <p>Here is your cute certificate!</p>
    <img src="https://i.imgur.com/dyUux8k.png" alt="Certificate" width="300">
  </div>
  <div id="gameOverBox">
    <h1>YOU DIE ðŸ’€</h1>
    <button onclick="location.reload()">Try Again</button>
  </div>

  <script>
    const canvas = document.getElementById("gameCanvas");
    const ctx = canvas.getContext("2d");
    const questionBox = document.getElementById("questionBox");
    const questionText = document.getElementById("questionText");
    const answersDiv = document.getElementById("answers");
    const cert = document.getElementById("certificate");
    const gameOverBox = document.getElementById("gameOverBox");
    const healthFill = document.getElementById("healthFill");

    const player = { x: 50, y: 180, size: 20, speed: 4, health: 3 };
    let keys = {};
    let level = 1;
    let score = 0;
    let ghosts = [];
    let showGhost = false;
    let gameOver = false;
    let ghostSpeed = 0.02;
    let door = { x: 500, y: 180, width: 40, height: 50, open: false };

    const walls = [
      { x: 0, y: 0, w: 600, h: 10 },
      { x: 0, y: 390, w: 600, h: 10 },
      { x: 0, y: 0, w: 10, h: 400 },
      { x: 590, y: 0, w: 10, h: 400 },
      { x: 100, y: 100, w: 400, h: 10 },
      { x: 100, y: 290, w: 150, h: 10 },
      { x: 350, y: 290, w: 150, h: 10 },
      { x: 100, y: 110, w: 10, h: 180 },
      { x: 490, y: 110, w: 10, h: 180 }
    ];

    const teleports = [
      { x: 20, y: 20, tx: 550, ty: 350 },
      { x: 550, y: 20, tx: 20, ty: 350 }
    ];

    const ghostColors = ["red", "pink", "cyan", "orange"];

    function drawPlayer() {
      ctx.fillStyle = "yellow";
      ctx.beginPath();
      ctx.arc(player.x, player.y, player.size, 0.2 * Math.PI, 1.8 * Math.PI);
      ctx.lineTo(player.x, player.y);
      ctx.fill();
    }

    function drawStation() {
      ctx.fillStyle = door.open ? "#0f0" : "#ffc107";
      ctx.fillRect(door.x, door.y, door.width, door.height);
      ctx.fillStyle = "brown";
      ctx.fillRect(door.x + 10, door.y + 10, 5, 5);
      ctx.strokeStyle = "#fff";
      ctx.lineWidth = 2;
      ctx.strokeRect(door.x, door.y, door.width, door.height);
    }
    function drawWalls() {
      ctx.fillStyle = "#888";
      walls.forEach(w => ctx.fillRect(w.x, w.y, w.w, w.h));
    }

    function drawTeleports() {
      teleports.forEach(t => {
        ctx.fillStyle = "purple";
        ctx.beginPath();
        ctx.arc(t.x + 10, t.y + 10, 10, 0, Math.PI * 2);
        ctx.fill();
      });
    }

    function isCollidingWall(x, y) {
      return walls.some(w => x > w.x && x < w.x + w.w && y > w.y && y < w.y + w.h);
    }

    function checkTeleport() {
      teleports.forEach(t => {
        const dx = player.x - t.x;
        const dy = player.y - t.y;
        if (Math.sqrt(dx * dx + dy * dy) < 20) {
          player.x = t.tx;
          player.y = t.ty;
        }
      });
    }

    function drawGhosts() {
      if (!showGhost) return;
      ghosts.forEach((g, i) => {
        ctx.fillStyle = ghostColors[i % ghostColors.length];
        ctx.beginPath();
        ctx.arc(g.x, g.y, 15, 0, Math.PI * 2);
        ctx.fill();
        ctx.fillStyle = "white";
        ctx.beginPath();
        ctx.arc(g.x - 5, g.y - 5, 4, 0, Math.PI * 2);
        ctx.arc(g.x + 5, g.y - 5, 4, 0, Math.PI * 2);
        ctx.fill();
        ctx.fillStyle = "blue";
        ctx.beginPath();
        ctx.arc(g.x - 5, g.y - 5, 2, 0, Math.PI * 2);
        ctx.arc(g.x + 5, g.y - 5, 2, 0, Math.PI * 2);
        ctx.fill();
        g.x += (player.x - g.x) * ghostSpeed;
        g.y += (player.y - g.y) * ghostSpeed;
        const dx = g.x - player.x;
        const dy = g.y - player.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        if (distance < 20) {
          player.health--;
          updateHealth();
          if (player.health <= 0) {
            gameOver = true;
            canvas.style.display = "none";
            gameOverBox.style.display = "block";
          }
          g.x = door.x;
          g.y = door.y;
        }
      });
    }

    function updateHealth() {
      healthFill.style.width = (player.health / 3 * 100) + "%";
    }

    function update() {
      if (gameOver) return;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawWalls();
      drawTeleports();
      drawStation();
      drawPlayer();
      drawGhosts();
      checkTeleport();
      if (!questionBox.style.display.includes("block")) {
        const tempX = player.x;
        const tempY = player.y;
        if (keys["ArrowRight"]) player.x += player.speed;
        if (keys["ArrowLeft"]) player.x -= player.speed;
        if (keys["ArrowUp"]) player.y -= player.speed;
        if (keys["ArrowDown"]) player.y += player.speed;
        if (isCollidingWall(player.x, player.y)) {
          player.x = tempX;
          player.y = tempY;
        }
      }
      if (
        player.x + player.size > door.x &&
        player.x < door.x + door.width &&
        player.y > door.y &&
        player.y < door.y + door.height &&
        level <= 10
      ) {
        door.open = true;
        askQuestion(level - 1);
        player.x = 50;
        player.y = 180;
        ghosts = [];
        showGhost = false;
      }
      if (level > 10) {
        canvas.style.display = "none";
        cert.style.display = "block";
      }
      requestAnimationFrame(update);
    }
    function askQuestion(i) {
      questionBox.style.display = "block";
      questionText.innerText = questions[i].q;
      answersDiv.innerHTML = "";
      questions[i].a.forEach((ans, idx) => {
        const btn = document.createElement("button");
        btn.innerText = ans;
        btn.onclick = () => {
          questionBox.style.display = "none";
          if (idx === questions[i].c) {
            score++;
            door.open = true;
          } else {
            showGhost = true;
            ghostSpeed += 0.005;
            ghosts = [
              { x: door.x, y: 50 },
              { x: door.x, y: 300 },
              { x: 550, y: 100 }
            ];
          }
          level++;
          door.open = false;
          door.x = Math.floor(Math.random() * (canvas.width - 60) + 40);
          door.y = Math.floor(Math.random() * (canvas.height - 60) + 40);
        };
        answersDiv.appendChild(btn);
      });
    }

    const questions = [
      { q: "x^2 Ã— x^3 =", a: ["x^5", "x^6", "5x", "x^8"], c: 0 },
      { q: "y^0 =", a: ["1", "0", "y", "undefined"], c: 0 },
      { q: "(x^1)^3 =", a: ["x^3", "x", "x^1", "3x"], c: 0 },
      { q: "(x^2)^3 =", a: ["x^6", "x^5", "x^8", "x^9"], c: 0 },
      { q: "x^4 Ã· x^2 =", a: ["x^2", "x^6", "x^8", "x^1"], c: 0 },
      { q: "a^3 Ã— a^2 =", a: ["a^5", "a^6", "a", "a^9"], c: 0 },
      { q: "(x^2 Ã— x^4) Ã· x^3 =", a: ["x^3", "x^2", "x^1", "x^6"], c: 0 },
      { q: "b^5 Ã· b^2 =", a: ["b^3", "b^2", "b^1", "b^7"], c: 0 },
      { q: "(z^3)^2 =", a: ["z^5", "z^6", "z^3", "z^9"], c: 1 },
      { q: "(x^2 Ã— x^3) Ã· x^2 =", a: ["x^3", "x^2", "x", "x^4"], c: 0 }
    ];

    document.addEventListener("keydown", (e) => (keys[e.key] = true));
    document.addEventListener("keyup", (e) => (keys[e.key] = false));
    update();
  </script>
</body>
</html>
